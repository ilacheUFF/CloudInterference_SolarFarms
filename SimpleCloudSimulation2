#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 22 19:45:42 2022

@author: ivanovich
"""
import pygame
import pymunk
import random

pygame.init()
display = pygame.display.set_mode((1000,800))
pygame.display.set_caption('Cloud Simulator')
clock = pygame.time.Clock()
FPS = 60


space = pymunk.Space()
space.gravity = (0,0)
ball_radius = 10


def convert_coordinates(point):  #converte as coordenadas
    return point[0],800-point[1]
#Velocidade de nuvems de 48km/h to 200km/h
class Ball():
    def __init__(self,x = 400,y = 600, ct=1,vx=0,vy=0,r=10):
        self.body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)            #Cria um corpo
        self.body.position= x,y          #Define a posição do corpo
        self.shape = pymunk.Circle(self.body, ball_radius) #Define o formato do corpo como circulo de radio 10
        self.shape.density = 1               #Densdidade do formato do corpo
        self.shape.elasticity = 1
        self.body.velocity = (vx,vy)
        self.shape.collision_type = ct
        self.ball_radius = r
        space.add(self.body,self.shape)          #o corpo e o seu formato é adiconado ao ambeinte de simulação
    def draw(self,color=(255,0,0)):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        #if self.shape.collision_type != 2 :
        pygame.draw.circle(display,color, (int(x),int(y)), self.ball_radius)
    def area_in_panel(self,x_vline):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        area = 10

class Painel():
    def __init__(self,x = 800,y = 400, vertices=[(700,300),(700,600),(850,600),(850,300)]):
        self.body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)            #Cria um corpo
        self.body.position= x,y          #Define a posição do corpo
        self.shape = pymunk.Poly(self.body, vertices) #Define o formato do corpo como circulo de radio 10
        self.shape.density = 1               #Densdidade do formato do corpo
        self.shape.elasticity = 1
        self.body.velocity = (0,0)
        self.vertices = vertices
        space.add(self.body,self.shape)          #o corpo e o seu formato é adiconado ao ambeinte de simulação
        #self.shape.collision_type = 1
        #self.ball_radius = r
    def draw(self,color=(255,0,0)):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        pygame.draw.polygon(display,color, self.vertices,width=5)
class Sensor():        
    def __init__(self,x = 600,y = 400, r=3):
        self.body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)            #Cria um corpo
        self.body.position= x,y          #Define a posição do corpo
        self.shape = pymunk.Circle(self.body, r) #Define o formato do corpo como circulo de radio 10
        self.shape.density = 1               #Densdidade do formato do corpo
        self.shape.elasticity = 1
        self.body.velocity = (0,0)
        space.add(self.body,self.shape)          #o corpo e o seu formato é adiconado ao ambeinte de simulação
        self.radius = r
    def draw(self,color=(255,0,0)):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        pygame.draw.circle(display,color, (int(x),int(y)), self.radius)  

            
            
            
def game():
    #ball_1 = Ball(200,150,r=10)
    sensor = Sensor()
    clouds = [Ball(x=random.randint(100,300),y=random.randint(350,450),r=random.randint(10,30),vx=random.randint(15,20)) for i in range(10)]
    #string_1 = String(ball_1.body,(300.0,550),"position")
    #string_1 = String(ball_1.body,ball_3.body,"body")
    #string_2 = String(ball_1.body,ball_2.body,"body")
    fazenda = Painel()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return
        
        display.fill((255,255,255))
        fazenda.draw()
        sensor.draw(color=(0,100,255))
        #ball_1.draw()
        for cloud in clouds:
            cloud.draw(color=(100,100,100))
        #string_2.draw()
        #string_1.draw()
        
        pygame.display.update()
        clock.tick(FPS)
        space.step(1/FPS)
game()    
pygame.quit()
