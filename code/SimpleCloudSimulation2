#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 22 19:45:42 2022

@author: ivanovich
"""
import pygame
import pymunk
import random
import matplotlib.pyplot as plt

pygame.init()
display = pygame.display.set_mode((1000,800))
pygame.display.set_caption('Cloud Simulator')
clock = pygame.time.Clock()
FPS = 40


space = pymunk.Space()
space.gravity = (0,0)
ball_radius = 10



def convert_coordinates(point):  #converte as coordenadas
    return point[0],800-point[1]
#Velocidade de nuvems de 48km/h to 200km/h
class Ball():
    def __init__(self,x = 400,y = 600, ct=1,vx=0,vy=0,r=10):
        self.body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)            #Cria um corpo
        self.body.position= x,y          #Define a posição do corpo
        self.shape = pymunk.Circle(self.body, ball_radius) #Define o formato do corpo como circulo de radio 10
        self.shape.density = 1               #Densdidade do formato do corpo
        self.shape.elasticity = 1
        self.body.velocity = (vx,vy)
        self.shape.collision_type = ct
        self.ball_radius = r
        self.ball_area = 3.14159*r*r
        space.add(self.body,self.shape)          #o corpo e o seu formato é adiconado ao ambeinte de simulação
    def draw(self,color=(255,0,0)):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        #if self.shape.collision_type != 2 :
        pygame.draw.circle(display,color, (int(x),int(y)), self.ball_radius)

    
    def area_in_panel(self,x_vline):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        area = 10

class Painel():
    def __init__(self,x = 800,y = 400, alt_p=300, lar_p=100):
        self.body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)            #Cria um corpo
        self.body.position= x,y          #Define a posição do corpo
        self.vertices = [(x-lar_p,y-alt_p),(x+lar_p,y-alt_p),(x+lar_p,y+alt_p),(x-lar_p,y+alt_p)]
        self.shape = pymunk.Poly(self.body, self.vertices) #Define o formato do corpo como circulo de radio 10
        self.shape.density = 1               #Densdidade do formato do corpo
        self.shape.elasticity = 1
        self.body.velocity = (0,0) 
        self.alt_p = alt_p
        self.lar_p = lar_p      
        self.area =  2*alt_p + 2*lar_p      
        space.add(self.body,self.shape)          #o corpo e o seu formato é adiconado ao ambeinte de simulação
        #self.shape.collision_type = 1
        #self.ball_radius = r
    def draw(self,color=(255,0,0)):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        pygame.draw.polygon(display,color, self.vertices,width=5)

class Sensor():        
    def __init__(self,x = 600,y = 400, r=3):
        self.body = pymunk.Body(body_type=pymunk.Body.KINEMATIC)            #Cria um corpo
        self.body.position= x,y          #Define a posição do corpo
        self.shape = pymunk.Circle(self.body, r) #Define o formato do corpo como circulo de radio 10
        self.shape.density = 1               #Densdidade do formato do corpo
        self.shape.elasticity = 1
        self.body.velocity = (0,0)
        space.add(self.body,self.shape)          #o corpo e o seu formato é adiconado ao ambeinte de simulação
        self.radius = r
    def draw(self,color=(255,0,0)):
        (x, y) = convert_coordinates(self.body.position)  #Pega as coordenadas do corpo rigido
        pygame.draw.circle(display,color, (int(x),int(y)), self.radius)  

def cloud_inside_panel(x,y,r,xp,yp,alt_p,lar_p):
    dentro =False
    if x>xp-lar_p and x<xp+lar_p:
        if y>yp-lar_p and y<yp+lar_p:
            dentro = True
    return(dentro)
def cloud_touch_sensor(xs,ys,xc,yc,r):    
    dentro =False
    if xs>xc-r and xs<xc+r:
        if ys>yc-r and ys<yc+r:
            dentro = True
    return(dentro)
            
            
def simula():
    sensor = Sensor()
    xs,ys = sensor.body.position
    clouds = [Ball(x=random.randint(500,600),y=random.randint(350,450),r=random.randint(10,30),vx=random.randint(15,20)) for i in range(15)]
    fazenda = Painel()
    historico_area_coberta = []
    vel_nuvem = 17  #Velocidade media de nuvem... neste momento não é calculada.. so estimada
    desenho = True
    nuvens_falsas = []
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return(historico_area_coberta,fazenda.area)
        
        display.fill((255,255,255))
        fazenda.draw()
        sensor.draw(color=(0,100,255))
        #ball_1.draw()
        area_coberta = 0
        
        for cloud in clouds:
            cloud.draw(color=(100,100,100))
            x,y = cloud.body.position
            xp,yp = fazenda.body.position
            nuvem_no_painel = cloud_inside_panel(x,y,cloud.ball_radius,xp,yp,fazenda.alt_p,fazenda.lar_p)
            if nuvem_no_painel:
                area_coberta +=cloud.ball_area                
            if (cloud_touch_sensor(xs,ys,x,y,cloud.ball_radius)) :
               nuvens_falsas.append( Ball(x = 600,y = 400, r=3,vx=vel_nuvem))                
               
        for nuvem_f in nuvens_falsas:
            nuvem_f.draw((0,200,255))
        historico_area_coberta.append(area_coberta)
        pygame.display.update()
        clock.tick(FPS)
        space.step(1/FPS)


hac ,  area_fazenda = simula()  
pygame.quit()
#%% Plota os resultados
area_coberta = [x/area_fazenda for x in hac]
plt.plot(area_coberta)
plt.show()

#%% prova

